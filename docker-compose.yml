
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: issueflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-issueflow}
      POSTGRES_USER: ${POSTGRES_USER:-issueflow}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-issueflow_secret}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - issueflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-issueflow} -d ${POSTGRES_DB:-issueflow}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: issueflow-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret}
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secret} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - issueflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # IssueFlow Core Service
  core:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: issueflow-core
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-issueflow}:${POSTGRES_PASSWORD:-issueflow_secret}@postgres:5432/${POSTGRES_DB:-issueflow}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secret}@redis:6379
      
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      
      # API
      API_VERSION: ${API_VERSION:-v1}
      API_PREFIX: ${API_PREFIX:-/api}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-15}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      
      # Multi-tenant
      TENANT_HEADER: ${TENANT_HEADER:-x-tenant-id}
      DEFAULT_TENANT: ${DEFAULT_TENANT:-default}
      
    ports:
      - "3000:3000"
    networks:
      - issueflow-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dashboard UI (Next.js)
  dashboard:
    build:
      context: ./packages/dashboard
      dockerfile: Dockerfile
    container_name: issueflow-dashboard
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000/api}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME:-IssueFlow}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3001}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-change-this}
    ports:
      - "3001:3000"
    networks:
      - issueflow-network
    depends_on:
      - core
    volumes:
      - ./packages/dashboard/.next:/app/.next

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: issueflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - issueflow-network
    depends_on:
      - core
      - dashboard

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: issueflow-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - issueflow-network
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: issueflow-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: redis:redis:6379:0:${REDIS_PASSWORD:-redis_secret}
    ports:
      - "8081:8081"
    networks:
      - issueflow-network
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  issueflow-network:
    driver: bridge
    name: issueflow-network